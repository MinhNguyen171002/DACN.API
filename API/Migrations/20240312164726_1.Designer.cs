// <auto-generated />
using System;
using API.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DB))]
    [Migration("20240312164726_1")]
    partial class _1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("API.Enity.Exam", b =>
                {
                    b.Property<string>("ExamID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ExamDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("ExamDuration")
                        .HasColumnType("time(6)");

                    b.Property<string>("ExamName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LevelID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("ExamID");

                    b.HasIndex("LevelID");

                    b.ToTable("exams");
                });

            modelBuilder.Entity("API.Enity.Level", b =>
                {
                    b.Property<string>("LevelID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("LevelID");

                    b.ToTable("levels");
                });

            modelBuilder.Entity("API.Enity.Question", b =>
                {
                    b.Property<string>("QuestionID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ExamID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Question1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Question2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Question3")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Question4")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("QuestionContext")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("QuestionID");

                    b.HasIndex("ExamID");

                    b.ToTable("questions");
                });

            modelBuilder.Entity("API.Enity.Result", b =>
                {
                    b.Property<string>("ResultID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ExamID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("ResultID");

                    b.HasIndex("ExamID");

                    b.HasIndex("UserID");

                    b.ToTable("results");
                });

            modelBuilder.Entity("API.Enity.User", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SDT")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserID");

                    b.ToTable("users");
                });

            modelBuilder.Entity("API.Enity.Exam", b =>
                {
                    b.HasOne("API.Enity.Level", "level")
                        .WithMany()
                        .HasForeignKey("LevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("level");
                });

            modelBuilder.Entity("API.Enity.Question", b =>
                {
                    b.HasOne("API.Enity.Exam", "exam")
                        .WithMany()
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("exam");
                });

            modelBuilder.Entity("API.Enity.Result", b =>
                {
                    b.HasOne("API.Enity.Exam", "exam")
                        .WithMany()
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Enity.User", "user")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("exam");

                    b.Navigation("user");
                });
#pragma warning restore 612, 618
        }
    }
}
